{"version":3,"sources":["components/WelcomeMessage/styles.module.css","components/Graph/Legend/styles.module.css","components/Graph/MonthNode/styles.module.css","components/Graph/DayNode/styles.module.css","assets/logo.png","components/DataDigestion/styles.module.css","components/Graph/GraphNode/styles.module.css","components/Graph/styles.module.css","commons/strava-utils.js","components/Spinner/index.js","components/AuthCallback/index.js","components/InitAuth/index.js","components/Header/index.js","components/ProgressSteps/index.js","components/WelcomeMessage/index.js","components/DataDigestion/index.js","components/Graph/GraphNode/index.js","components/Graph/MonthNode/index.js","components/Graph/DayNode/index.js","components/Graph/Legend/index.js","components/Icons/index.js","components/Graph/Activity/index.js","components/Graph/index.js","components/WorkflowController/index.js","App.js","serviceWorker.js","index.js","components/Header/style.module.css"],"names":["module","exports","_athlete","userClient","graphData","initializeUserClient","access_token","Strava","client","getAthlete","completeAuthentication","code","a","console","log","oauth","getToken","athlete","processActivitiesData","per_page","before","Math","floor","Date","getTime","after","roundToPreviousSunday","page","currentBatch","allActivities","listActivities","length","computeGraphData","epochSecs","date","getDay","setDate","getDate","dayWiseData","today","normalizeDateToDay","afterDate","toLocaleString","split","initializeEmptyDataSctructure","forEach","activity","dataObj","start_date_local","activities","effortLevel","push","type","distanceBasedEffort","distance","getEffortLevel","slabDistance","tolerance","setMilliseconds","setSeconds","setMinutes","setHours","config","client_id","process","client_secret","redirect_uri","Spinner","props","className","spin","style","fontSize","AuthCallback","history","useHistory","useEffect","params","URLSearchParams","window","location","search","get","InitAuth","getRequestAccessURL","scope","Header","cx","styles","header","src","logo","logoImage","alt","aboutSection","title","iconContainer","href","target","rel","icon","Step","Steps","ProgressSteps","step","status","Title","Typography","Text","WelcomeMessage","welcomeMessage","level","sampleGraph","strong","connectText","onClick","DataDigestion","done","dataDigestion","effortToColor","5","4","3","2","1","GraphNode","day","disableHoverInfo","setSelectedDay","mouseLeaveDelay","mouseEnterDelay","round","reduce","acc","val","node","backgroundColor","MonthNode","month","monthNode","monthText","DayNode","dayText","Legend","legend","labelText","DistanceIcon","xmlns","xmlnsXlink","version","id","x","y","height","viewBox","enableBackground","xmlSpace","d","SpeedometerIcon","getPace","elapsed_time","timeMins","decimalInSecs","Activity","name","location_city","location_country","width","extra","span","value","precision","prefix","component","suffix","Graph","data","days","Object","keys","reverse","useState","find","selectedDay","monthRunner","now","months","Array","from","map","setMonth","getMonth","shift","activitiesCount","React","useMemo","container","userInfoContainer","profile","userAvatar","userBasicInfo","firstname","lastname","userCity","city","country","graphContainer","graphSection","dayRunner","key","padding","index","graph","row","activitiesSummaryContainer","JSON","stringify","WorkflowController","setStep","App","path","Boolean","hostname","match","Sentry","dsn","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8714cd13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcomeMessage\":\"styles_welcomeMessage__1TKJu\",\"sampleGraph\":\"styles_sampleGraph__2t_wQ\",\"connectText\":\"styles_connectText__1YX2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"legend\":\"styles_legend__17u3L\",\"labelText\":\"styles_labelText__2u9Z9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"monthNode\":\"styles_monthNode__1qqTP\",\"monthText\":\"styles_monthText__2UjKw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"day\":\"styles_day__2MEFe\",\"dayText\":\"styles_dayText__3nYRt\"};","module.exports = __webpack_public_path__ + \"static/media/logo.52946ee0.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataDigestion\":\"styles_dataDigestion__2SQFo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"node\":\"styles_node__1LXWE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3B2i6\",\"graphContainer\":\"styles_graphContainer__24ldH\",\"graphSection\":\"styles_graphSection__1023A\",\"graph\":\"styles_graph__RRI0v\",\"dayRunner\":\"styles_dayRunner__24Is6\",\"monthRunner\":\"styles_monthRunner__UAYNl\",\"userInfoContainer\":\"styles_userInfoContainer__1hAKg\",\"userAvatar\":\"styles_userAvatar__2Pi6L\",\"userBasicInfo\":\"styles_userBasicInfo__1onZ9\",\"userCity\":\"styles_userCity__LMxxX\",\"activitiesSummaryContainer\":\"styles_activitiesSummaryContainer__1nINb\"};","import Strava from 'strava-v3';\n\nlet _athlete = null;\nlet userClient = null;\nlet graphData = null;\n\nStrava.config({\n  client_id: process.env.REACT_APP_STRAVA_CLIENT_ID,\n  client_secret: process.env.REACT_APP_STRAVA_CLIENT_SECRET,\n  redirect_uri: process.env.REACT_APP_STRAVA_REDIRECT_URI,\n});\n\nfunction initializeUserClient(access_token) {\n  userClient = new Strava.client(access_token);\n}\n\nexport function getRequestAccessURL() {\n  return Strava.oauth.getRequestAccessURL({scope: 'activity:read'});\n}\n\nexport function getAthlete() {\n  return _athlete;\n}\n\nexport async function completeAuthentication(code) {\n  console.log('code:', code);\n  const {access_token, athlete} = await Strava.oauth.getToken(code);\n  console.log('access_token, athlete', access_token, athlete);\n  _athlete = athlete;\n  initializeUserClient(access_token);\n}\n\nexport async function processActivitiesData() {\n  const per_page = 50;\n  const before = Math.floor(new Date().getTime() / 1000);\n  const oneYearBack =\n    before - 60 /*secs*/ * 60 /*mins*/ * 24 /* hours*/ * 365; /*days*/\n  const after = roundToPreviousSunday(oneYearBack);\n  let page = 1;\n  let currentBatch = [];\n  let allActivities = [];\n  do {\n    currentBatch = await userClient.athlete.listActivities({\n      before,\n      after,\n      page,\n      per_page,\n    });\n    allActivities = [...allActivities, ...currentBatch];\n    page++;\n  } while (currentBatch.length === per_page);\n  graphData = computeGraphData(allActivities, before, after);\n}\n\nexport function roundToPreviousSunday(epochSecs) {\n  const date = new Date(epochSecs * 1000);\n  while (date.getDay() !== 0) {\n    date.setDate(date.getDate() - 1);\n  }\n  return date.getTime() / 1000;\n}\n\nexport function getGraphData() {\n  return graphData;\n}\n\nfunction computeGraphData(allActivities, before, after) {\n  const dayWiseData = initializeEmptyDataSctructure(before, after);\n  allActivities.forEach(activity => {\n    let dataObj = dayWiseData[activity.start_date_local.split('T')[0]];\n    if (!dataObj) {\n      dataObj = {};\n      dayWiseData[activity.start_date_local.split('T')[0]] = dataObj;\n    }\n    if (!dataObj.activities) {\n      dataObj.activities = [];\n      dataObj.effortLevel = 0;\n    }\n    dataObj.activities.push(activity);\n    dataObj.effortLevel += getEffortLevel(activity);\n  });\n  return dayWiseData;\n}\n\nfunction getEffortLevel(activity) {\n  const distanceTolerance = 300;\n  switch (activity.type) {\n    case 'Run':\n      return distanceBasedEffort(activity.distance, 5000, distanceTolerance);\n    case 'Ride':\n      return distanceBasedEffort(activity.distance, 10000, distanceTolerance);\n    case 'Walk':\n      return distanceBasedEffort(activity.distance, 7500, distanceTolerance);\n    default:\n      // Considering the effort is 1.5 for any other activity\n      return 1.5;\n  }\n}\n\nfunction distanceBasedEffort(distance, slabDistance, tolerance) {\n  if (distance === 0) {\n    return 0;\n  }\n  if (distance < slabDistance - tolerance) {\n    return 1;\n  }\n  return Math.floor((distance + tolerance) / slabDistance + 1);\n}\n\nfunction initializeEmptyDataSctructure(before, after) {\n  const today = new Date(before * 1000);\n  normalizeDateToDay(today);\n  const dayWiseData = {};\n  const afterDate = new Date(after * 1000);\n  normalizeDateToDay(afterDate);\n  for (\n    ;\n    today.getTime() >= afterDate.getTime();\n    today.setDate(today.getDate() - 1)\n  ) {\n    dayWiseData[today.toLocaleString('sv').split(' ')[0]] = {};\n  }\n  return dayWiseData;\n}\n\nfunction normalizeDateToDay(date) {\n  date.setMilliseconds(0);\n  date.setSeconds(0);\n  date.setMinutes(0);\n  date.setHours(0);\n}\n","import React from 'react';\nimport Icon from 'antd/es/icon';\n\nexport default function Spinner(props) {\n  return (\n    <Icon\n      className={`theme-color align-center ${props.className || ''}`}\n      type=\"loading-3-quarters\"\n      spin\n      style={{fontSize: '30px'}}\n    />\n  );\n}\n","import React, {useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {completeAuthentication} from '../../commons/strava-utils';\nimport Spinner from '../Spinner';\n\nexport default function AuthCallback(props) {\n  const history = useHistory();\n  useEffect(() => {\n    (async () => {\n      const params = new URLSearchParams(window.location.search);\n      await completeAuthentication(params.get('code'));\n      history.push(process.env.PUBLIC_URL);\n    })();\n  }, [history]);\n\n  return <Spinner />;\n}\n","import React, {useEffect} from 'react';\nimport {getRequestAccessURL} from '../../commons/strava-utils';\nimport Spinner from '../Spinner';\n\nexport default function InitAuth() {\n  useEffect(() => {\n    window.location = getRequestAccessURL();\n  }, []);\n  return <Spinner />;\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport styles from './style.module.css';\nimport logo from '../../assets/logo.png';\nimport {Icon, Tooltip} from 'antd';\n\nexport default function Header() {\n  return (\n    <div className={cx(styles.header)}>\n      <img\n        src={logo}\n        className={cx(styles.logoImage)}\n        alt=\"Strava-Github-Like-Graph\"\n      />\n      <div className={cx(styles.aboutSection)}>\n        <Tooltip\n          title=\"Lets improve it together! 😎\"\n          className={cx(styles.iconContainer)}\n        >\n          <a\n            href=\"https://github.com/manojVivek/strava-github-like-graph\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon type=\"github\" className={cx(styles.icon)} />\n          </a>\n        </Tooltip>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Steps from 'antd/es/steps';\nimport Icon from 'antd/es/icon';\n\nconst {Step} = Steps;\n\nexport default function ProgressSteps({step}) {\n  return (\n    <Steps>\n      <Step\n        status={step < 2 ? 'process' : 'finish'}\n        title=\"Connect Strava\"\n        icon={<Icon type=\"user\" />}\n      />\n      <Step\n        status={step === 2 ? 'process' : step === 1 ? 'wait' : 'finish'}\n        title=\"Data Digestion\"\n        icon={<Icon type=\"experiment\" />}\n      />\n      <Step\n        status={step === 3 ? 'process' : 'wait'}\n        title=\"Visualize\"\n        icon={<Icon type=\"crown\" />}\n      />\n    </Steps>\n  );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\nimport Button from 'antd/es/button';\n\nimport styles from './styles.module.css';\n\nconst { Title, Text } = Typography;\n\nexport default function WelcomeMessage() {\n  const history = useHistory();\n  return (\n    <div className={cx(styles.welcomeMessage)}>\n      <Title level={3} className=\"theme-color text-center\">\n\n        Generate your Strava activities graph for last year:\n      </Title>\n      <img\n        alt=\"Sample graph\"\n        className={cx(styles.sampleGraph)}\n        src={`${process.env.PUBLIC_URL}/sample-graph_maxfield.png`}\n      />\n      <Text strong className={cx('height-200', styles.connectText)}>\n        Connect your Strava account below to see yours\n      </Text>\n      <Button\n        type=\"primary\"\n        icon=\"lock\"\n        className=\"top-space-medium\"\n        onClick={() => history.push('init-auth')}\n      >\n        Connect Strava to see yours!\n      </Button>\n    </div>\n  );\n}\n","import React, {useEffect} from 'react';\nimport cx from 'classnames';\nimport Spinner from '../Spinner';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\nimport {processActivitiesData} from '../../commons/strava-utils';\n\nconst {Title} = Typography;\n\nexport default function DataDigestion({done}) {\n  useEffect(() => {\n    (async () => {\n      await processActivitiesData();\n      done();\n    })();\n  }, [done]);\n  return (\n    <div className={cx(styles.dataDigestion)}>\n      <Title level={3} className=\"theme-color\">\n        Negotiating your data with Strava..\n      </Title>\n\n      <Spinner className=\"top-space-medium\" />\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Tooltip from 'antd/es/tooltip';\n\nimport styles from './styles.module.css';\n\nconst effortToColor = {\n  5: '#E34402',\n  4: '#E96935',\n  3: '#EE8F67',\n  2: '#F4B49A',\n  1: '#F9DACC',\n};\n\nexport default function GraphNode({\n  activities,\n  effortLevel,\n  day,\n  disableHoverInfo,\n  setSelectedDay,\n}) {\n  return (\n    <Tooltip\n      mouseLeaveDelay={0}\n      mouseEnterDelay={0.05}\n      title={\n        disableHoverInfo\n          ? null\n          : `${\n              activities\n                ? `${activities.length} activit${\n                    activities.length === 1 ? 'y' : 'ies'\n                  } of ${Math.round(\n                    activities.reduce((acc, val) => (acc += val.distance), 0) /\n                      1000\n                  )}kms`\n                : 'No activities'\n            } on ${day}`\n      }\n    >\n      <div\n        className={cx(styles.node)}\n        style={{\n          backgroundColor:\n            effortToColor[effortLevel > 5 ? 5 : effortLevel] || '#efefef',\n        }}\n        onClick={setSelectedDay && (() => setSelectedDay(day))}\n      ></div>\n    </Tooltip>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\n\nconst {Text} = Typography;\n\nexport default function MonthNode({month}) {\n  return (\n    <div className={cx(styles.monthNode)}>\n      <Text className={cx(styles.monthText)}>{month}</Text>\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\n\nconst {Text} = Typography;\n\nexport default function DayNode({day}) {\n  return (\n    <div className={cx(styles.day)}>\n      <Text className={cx(styles.dayText)}>{day}</Text>\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\nimport GraphNode from '../GraphNode';\n\nconst {Text} = Typography;\n\nexport default function Legend() {\n  return (\n    <div className={cx(styles.legend)}>\n      <Text className={cx(styles.labelText)}>Less</Text>\n      <GraphNode effortLevel={0} disableHoverInfo={true} />\n      <GraphNode effortLevel={1} disableHoverInfo={true} />\n      <GraphNode effortLevel={2} disableHoverInfo={true} />\n      <GraphNode effortLevel={3} disableHoverInfo={true} />\n      <GraphNode effortLevel={4} disableHoverInfo={true} />\n      <GraphNode effortLevel={5} disableHoverInfo={true} />\n      <Text className={cx(styles.labelText)}>More</Text>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport const DistanceIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    version=\"1.1\"\n    id=\"Capa_1\"\n    x=\"0px\"\n    y=\"0px\"\n    height={24}\n    viewBox=\"0 0 512 512\"\n    style={{enableBackground: 'new 0 0 512 512'}}\n    xmlSpace=\"preserve\"\n  >\n    <g>\n      <g>\n        <g>\n          <path d=\"M426.667,0c-47.052,0-85.333,38.281-85.333,85.333c0,40.814,60.469,123.419,74.637,142.22     c-0.004,6.073,0,12.036-0.147,17.509c-0.156,5.885,4.49,10.792,10.385,10.948c0.094,0,0.188,0,0.292,0     c5.75,0,10.5-4.594,10.656-10.385c0.147-5.616,0.143-11.746,0.147-17.992C451.378,208.961,512,126.195,512,85.333     C512,38.281,473.719,0,426.667,0z M426.667,206.146c-23.448-32.26-64-93.656-64-120.813c0-35.292,28.708-64,64-64     s64,28.708,64,64C490.667,112.49,450.115,173.885,426.667,206.146z\" />\n          <path d=\"M426.667,64c-11.76,0-21.333,9.573-21.333,21.333c0,11.76,9.573,21.333,21.333,21.333S448,97.094,448,85.333     C448,73.573,438.427,64,426.667,64z\" />\n          <path d=\"M128,234.667c-35.292,0-64,28.708-64,64c0,35.292,28.708,64,64,64s64-28.708,64-64     C192,263.375,163.292,234.667,128,234.667z M128,341.333c-23.531,0-42.667-19.135-42.667-42.667S104.469,256,128,256     s42.667,19.135,42.667,42.667S151.531,341.333,128,341.333z\" />\n          <path d=\"M289.573,384.438c-5.521-2.146-11.667,0.594-13.802,6.094c-4.781,12.354-10.76,26.76-18.823,39.958     c-3.073,5.031-1.479,11.594,3.542,14.667c1.74,1.063,3.656,1.563,5.552,1.563c3.594,0,7.104-1.813,9.115-5.104     c8.938-14.646,15.385-30.146,20.51-43.375C297.792,392.75,295.063,386.573,289.573,384.438z\" />\n          <path d=\"M229.427,462.281c-10.688,8.469-22.833,14.844-37.146,19.5c-5.604,1.823-8.667,7.844-6.844,13.448     c1.469,4.5,5.646,7.365,10.146,7.365c1.094,0,2.208-0.167,3.302-0.521c16.531-5.375,31.26-13.135,43.792-23.063     c4.615-3.667,5.396-10.375,1.74-14.99C240.729,459.417,234.031,458.594,229.427,462.281z\" />\n          <path d=\"M326.5,307.427c-17.604,9.99-27.385,27.333-33.219,39.5c-2.552,5.313-0.313,11.688,5,14.229     c1.49,0.719,3.063,1.052,4.604,1.052c3.979,0,7.792-2.229,9.625-6.052c7.406-15.448,14.969-24.75,24.531-30.188     c5.115-2.906,6.917-9.417,4-14.542C338.146,306.302,331.656,304.5,326.5,307.427z\" />\n          <path d=\"M422.708,281.021c-4.844-3.281-11.5-2.021-14.813,2.854c-3.51,5.188-10.698,12.323-32.438,14.271     c-5.865,0.531-10.198,5.708-9.667,11.583c0.5,5.542,5.156,9.708,10.615,9.708c0.323,0,0.646-0.01,0.969-0.042     c23.094-2.073,38.854-9.781,48.188-23.563C428.865,290.958,427.583,284.323,422.708,281.021z\" />\n          <path d=\"M153.275,490.805C186.932,454.913,256,372.341,256,298.667c0-71.771-56.229-128-128-128s-128,56.229-128,128     c0,95.26,115.75,205.76,120.677,210.417c2.052,1.948,4.688,2.917,7.323,2.917c7.771,0,15.156-0.271,22.156-0.802     c5.875-0.448,10.281-5.563,9.833-11.438C159.669,495.556,156.948,492.277,153.275,490.805z M128,486.292     c-25.198-25.708-106.667-114.5-106.667-187.625C21.333,238.854,68.188,192,128,192s106.667,46.854,106.667,106.667     C234.667,371.792,153.198,460.583,128,486.292z\" />\n        </g>\n      </g>\n    </g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n  </svg>\n);\n\nexport const SpeedometerIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    version=\"1.1\"\n    id=\"Capa_1\"\n    height={24}\n    x=\"0px\"\n    y=\"0px\"\n    viewBox=\"0 0 512 512\"\n    style={{enableBackground: 'new 0 0 512 512'}}\n    xmlSpace=\"preserve\"\n  >\n    <g>\n      <g>\n        <g>\n          <path d=\"M435.143,129.356c-6.796-6.795-17.463-7.797-25.407-2.384c-29.926,20.398-180.03,122.969-196.162,139.1     c-23.394,23.395-23.394,61.459,0,84.854c11.697,11.696,27.063,17.545,42.427,17.545c15.364,0,30.729-5.849,42.427-17.545     c16.131-16.132,118.701-166.236,139.1-196.162C442.939,146.821,441.938,136.153,435.143,129.356z M270.142,322.641     c-7.797,7.799-20.486,7.799-28.283,0c-7.798-7.797-7.799-20.482-0.004-28.28c6.268-6.194,48.885-36.588,101.319-73.035     C306.728,273.76,276.334,316.375,270.142,322.641z\" />\n          <path d=\"M92.231,401.523l-24.69,12.044C49.475,381.325,40,345.338,40,308.499c0-26.991,4.977-52.842,14.06-76.683l28.291,13.57     c2.79,1.338,5.735,1.972,8.636,1.972c7.453,0,14.608-4.185,18.047-11.355c4.776-9.959,0.576-21.906-9.384-26.683l-27.932-13.398     c34.717-56.62,94.784-96.095,164.283-102.505v30.081c0,11.046,8.954,20,20,20c11.046,0,20-8.954,20-20V93.402     c23.828,2.169,46.884,8.237,68.771,18.117c10.065,4.545,21.912,0.066,26.457-9.999c4.545-10.068,0.068-21.913-10-26.458     C328.063,60.091,292.659,52.499,256,52.499c-68.38,0-132.667,26.628-181.02,74.98C26.629,175.832,0,240.119,0,308.499     c0,50.53,14.998,99.674,43.373,142.115c3.822,5.715,10.141,8.886,16.639,8.886c2.954,0,5.946-0.655,8.757-2.026l41-20     c9.928-4.843,14.05-16.816,9.207-26.744C114.133,400.803,102.159,396.682,92.231,401.523z\" />\n          <path d=\"M489.436,203.271c-4.544-10.067-16.387-14.547-26.458-10c-10.067,4.545-14.544,16.39-9.999,26.457     C465.601,247.686,472,277.553,472,308.499c0,36.894-9.506,72.939-27.625,105.218l-25.777-12.275     c-9.971-4.748-21.906-0.515-26.656,9.459c-4.749,9.972-0.514,21.907,9.459,26.656l42,20c2.763,1.315,5.692,1.944,8.588,1.944     c6.5,0,12.82-3.175,16.637-8.886C497.002,408.173,512,359.029,512,308.499C512,271.84,504.408,236.436,489.436,203.271z\" />\n        </g>\n      </g>\n    </g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n    <g></g>\n  </svg>\n);\n","import React from 'react';\nimport {Statistic, Row, Col, Typography, Card, Icon} from 'antd';\nimport {DistanceIcon, SpeedometerIcon} from '../../Icons';\n\nconst {Text} = Typography;\n\nfunction getPace(elapsed_time, distance) {\n  const timeMins = elapsed_time / 60 / (distance / 1000);\n  const decimalInSecs = Math.round((timeMins - Math.floor(timeMins)) * 60);\n  return `${Math.floor(timeMins)}:${decimalInSecs}`;\n}\n\nexport default function Activity({\n  name,\n  distance,\n  elapsed_time,\n  location_city,\n  location_country,\n}) {\n  return (\n    <Row className=\"bottom-space-small\">\n      <Card\n        title={name}\n        style={{width: 600}}\n        extra={\n          <Text>\n            {location_city ? `${location_city}, ` : null}\n            {location_country}\n          </Text>\n        }\n      >\n        <Col span={8}>\n          <Statistic\n            title=\"\"\n            value={distance / 1000}\n            precision={2}\n            prefix={<Icon component={DistanceIcon} />}\n            suffix=\"Km\"\n          />\n        </Col>\n        <Col span={8}>\n          <Statistic\n            title=\"\"\n            value={elapsed_time / 60}\n            precision={0}\n            prefix={<Icon type=\"clock-circle\" />}\n            suffix=\"mins\"\n          />\n        </Col>\n        <Col span={8}>\n          <Statistic\n            title=\"\"\n            value={getPace(elapsed_time, distance)}\n            precision={2}\n            prefix={<Icon component={SpeedometerIcon} />}\n            suffix=\"/km\"\n          />\n        </Col>\n      </Card>\n    </Row>\n  );\n}\n","import React, {useState} from 'react';\nimport cx from 'classnames';\nimport GraphNode from './GraphNode';\nimport Typography from 'antd/es/typography';\nimport Avatar from 'antd/es/avatar';\nimport MonthNode from './MonthNode';\nimport {Statistic, Row, Col} from 'antd';\n\nimport styles from './styles.module.css';\nimport {getAthlete} from '../../commons/strava-utils';\nimport DayNode from './DayNode';\nimport Legend from './Legend';\nimport Activity from './Activity';\n\nconst {Text, Title} = Typography;\n\nexport default function Graph({data}) {\n  const athlete = getAthlete();\n  const days = Object.keys(data).reverse();\n  const [selectedDay, setSelectedDay] = useState(\n    Object.keys(data).find(day => data[day].effortLevel)\n  );\n  console.log('selectedDay', selectedDay);\n  const monthRunner = new Date(days[0]);\n  const now = new Date();\n  const months = Array.from(Array(12)).map(() => {\n    const month = monthRunner.toLocaleString('default', {month: 'short'});\n    monthRunner.setMonth(monthRunner.getMonth() + 1);\n    return month;\n  });\n  if (now.getDate() > 14) {\n    months.push(months[0]);\n  }\n  if (now.getDate() > 21) {\n    months.shift();\n  }\n  const activitiesCount = React.useMemo(\n    () =>\n      Object.keys(data).reduce(\n        (acc, val) => (acc += (data[val].activities || []).length),\n        0\n      ),\n    [data]\n  );\n  return (\n    <div className={cx(styles.container, 'top-space-medium')}>\n      <div className={cx(styles.userInfoContainer)}>\n        <Avatar src={athlete.profile} className={cx(styles.userAvatar)} />\n        <div className={cx(styles.userBasicInfo)}>\n          <Text strong>{`${athlete.firstname} ${athlete.lastname}`}</Text>\n          <Text\n            className={cx(styles.userCity)}\n          >{`${athlete.city}, ${athlete.country}`}</Text>\n        </div>\n      </div>\n      <div>\n        <Text>{activitiesCount} activities in the last year</Text>\n      </div>\n      <div className={cx(styles.graphContainer)}>\n        <div className={cx(styles.graphSection)}>\n          <div className={cx(styles.dayRunner)}>\n            {['Mon', 'Wed', 'Fri'].map(day => (\n              <DayNode day={day} key={day} />\n            ))}\n          </div>\n          <div>\n            <div\n              className={cx(styles.monthRunner)}\n              style={{padding: months.length > 12 ? 0 : '0 16px'}}\n            >\n              {months.map((month, index) => (\n                <MonthNode month={month} key={month + index} />\n              ))}\n            </div>\n            <div className={cx(styles.graph)}>\n              {days.map(day => (\n                <GraphNode\n                  {...data[day]}\n                  key={day}\n                  day={day}\n                  setSelectedDay={setSelectedDay}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className={cx(styles.row)}>\n          <Legend />\n        </div>\n      </div>\n      <div className={cx(styles.activitiesSummaryContainer)}>\n        <Title level={3}>Activities on {selectedDay}</Title>\n        {(data[selectedDay].activities || []).map(activity => (\n          <Activity {...activity} />\n        ))}\n      </div>\n      <div>\n        <pre>{JSON.stringify(data[selectedDay], null, 2)}</pre>\n      </div>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport {getAthlete, getGraphData} from '../../commons/strava-utils';\nimport ProgressSteps from '../ProgressSteps';\nimport WelcomeMessage from '../WelcomeMessage';\nimport DataDigestion from '../DataDigestion';\nimport Graph from '../Graph';\n\nexport default function WorkflowController(props) {\n  const athlete = getAthlete();\n  const [step, setStep] = useState(athlete == null ? 1 : 2);\n  return (\n    <>\n      <ProgressSteps step={step} />\n      {step === 1 && <WelcomeMessage />}\n      {step === 2 && <DataDigestion done={() => setStep(3)} />}\n      {step === 3 && <Graph data={getGraphData()} />}\n    </>\n  );\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport AuthCallback from './components/AuthCallback';\nimport InitAuth from './components/InitAuth';\nimport Header from './components/Header';\nimport WorkflowController from './components/WorkflowController';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Router>\n        <Switch>\n          <Route path={`${process.env.PUBLIC_URL}/auth-callback`}>\n            <AuthCallback />\n          </Route>\n          <Route path={`${process.env.PUBLIC_URL}/init-auth`}>\n            <InitAuth />\n          </Route>\n          <Route path={`${process.env.PUBLIC_URL}/`}>\n            <WorkflowController />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Sentry from '@sentry/browser';\n\nif (process.env.NODE_ENV === 'production') {\n  Sentry.init({\n    dsn: 'https://7ef33f9edba24b8aad31ad5801157c48@sentry.io/2201384',\n  });\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"style_header__MlSQ_\",\"logoImage\":\"style_logoImage__1Hwfc\",\"aboutSection\":\"style_aboutSection__YQNF5\",\"iconContainer\":\"style_iconContainer__uR_VW\",\"icon\":\"style_icon__1XDv0\"};"],"sourceRoot":""}